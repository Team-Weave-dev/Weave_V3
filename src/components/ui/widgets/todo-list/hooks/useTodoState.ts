import { useState, useCallback, useEffect, useMemo, useRef } from 'react';
import { v4 as uuidv4 } from 'uuid';
import { useLocalStorage } from './useLocalStorage';
import { useDragAndDrop } from './useDragAndDrop';
import type { TodoTask, TodoSection, TodoPriority, ViewMode } from '../types';
import type { TodoTask as DashboardTodoTask } from '@/types/dashboard';
import type { TodoSection as StorageTodoSection } from '@/lib/storage/types/entities/todo-section';
import {
  STORAGE_KEY,
  SECTIONS_KEY,
  VIEW_MODE_KEY,
  DEFAULT_PRIORITY
} from '../constants';
import { generateInitialData } from '../constants/mock-data';
import { notifyCalendarDataChanged, addCalendarDataChangedListener } from '@/lib/calendar-integration/events';
import {
  getTodoTasks,
  addTodoTask,
  updateTodoTask,
  deleteTodoTask,
  saveTodoTasks,
  toTask
} from '@/lib/mock/tasks';
import { taskService } from '@/lib/storage';
import { todoSectionService } from '@/lib/storage';

// ============================================================================
// Type Conversion: Widget TodoTask ↔ Dashboard TodoTask
// ============================================================================

/**
 * Convert Dashboard TodoTask to Widget TodoTask
 */
function dashboardToWidgetTask(dashboardTask: DashboardTodoTask): TodoTask {
  return {
    id: dashboardTask.id,
    title: dashboardTask.title,
    completed: dashboardTask.completed,
    priority: dashboardTask.priority,
    depth: dashboardTask.depth,
    children: dashboardTask.children?.map(dashboardToWidgetTask),
    sectionId: dashboardTask.sectionId,
    parentId: dashboardTask.parentId,
    order: dashboardTask.order,
    isExpanded: dashboardTask.isExpanded,
    createdAt: dashboardTask.createdAt, // Dashboard has required createdAt
    completedAt: dashboardTask.completedAt,
    dueDate: dashboardTask.dueDate,
  };
}

/**
 * Convert Widget TodoTask to Dashboard TodoTask
 */
function widgetToDashboardTask(widgetTask: TodoTask): DashboardTodoTask {
  return {
    id: widgetTask.id,
    title: widgetTask.title,
    completed: widgetTask.completed,
    priority: widgetTask.priority,
    depth: widgetTask.depth,
    children: widgetTask.children?.map(widgetToDashboardTask),
    sectionId: widgetTask.sectionId,
    parentId: widgetTask.parentId,
    order: widgetTask.order,
    isExpanded: widgetTask.isExpanded,
    createdAt: widgetTask.createdAt || new Date(), // Ensure createdAt is always set
    completedAt: widgetTask.completedAt,
    dueDate: widgetTask.dueDate,
  };
}

// ============================================================================
// Type Conversion: Widget TodoSection ↔ Storage TodoSection
// ============================================================================

/**
 * Convert Storage TodoSection to Widget TodoSection
 */
function storageToWidgetSection(storageSection: StorageTodoSection): TodoSection {
  return {
    id: storageSection.id,
    name: storageSection.name,
    order: storageSection.orderIndex,
    isExpanded: storageSection.isExpanded
  };
}

/**
 * Convert Widget TodoSection to Storage TodoSection Create payload
 * (id, userId, createdAt, updatedAt will be generated by service)
 */
function widgetToStorageSection(
  widgetSection: TodoSection,
  userId: string
): Omit<StorageTodoSection, 'id' | 'createdAt' | 'updatedAt'> {
  return {
    userId,
    name: widgetSection.name,
    orderIndex: widgetSection.order,
    isExpanded: widgetSection.isExpanded
  };
}

export function useTodoState(props?: {
  tasks?: TodoTask[],
  onTaskAdd?: (task: TodoTask) => void,
  onTaskToggle?: (id: string) => void,
  onTaskDelete?: (id: string) => void,
  onTaskUpdate?: (id: string, updates: Partial<TodoTask>) => void
}) {
  const { tasks: propsTasks, onTaskAdd, onTaskToggle, onTaskDelete, onTaskUpdate } = props || {};

  // Load initial data from Storage API or generate mock data
  const loadInitialData = useCallback(async () => {
    // SSR check - return initial data on server
    if (typeof window === 'undefined') {
      console.log('SSR detected, returning initial data');
      return generateInitialData();
    }

    try {
      // Storage API에서 tasks 로드 (Dashboard TodoTask[])
      const savedDashboardTasks = await getTodoTasks();

      // Dashboard TodoTask[] → Widget TodoTask[] 변환
      const savedTasks = savedDashboardTasks.map(dashboardToWidgetTask);

      // Storage API에서 sections 로드 (RLS로 자동 필터링됨)
      const storageSections = await todoSectionService.getAll();

      // Storage TodoSection[] → Widget TodoSection[] 변환
      const savedSections = storageSections.map(storageToWidgetSection);

      // Tasks나 Sections 중 하나라도 있으면 저장된 데이터 사용
      if ((savedTasks && savedTasks.length > 0) || (savedSections && savedSections.length > 0)) {
        // Use saved data if available
        return {
          tasks: savedTasks || [],
          sections: savedSections || []
        };
      } else {
        // Generate initial data only if both are empty
        return generateInitialData();
      }
    } catch (error) {
      console.error('Failed to load todo data from Storage API:', error);
      return generateInitialData();
    }
  }, []);

  // Get initial data - prefer props over Storage API
  const getInitialData = useCallback(async () => {
    // If props tasks are provided and not empty, use them
    if (propsTasks && propsTasks.length > 0) {
      const sectionsFromTasks: TodoSection[] = Array.from(new Set(propsTasks.map(t => t.sectionId)))
        .filter((id): id is string => Boolean(id)) // Type guard to filter out undefined
        .map((sectionId, index) => ({
          id: sectionId,
          name: sectionId,
          order: index,
          isExpanded: true
        }));
      return { tasks: propsTasks, sections: sectionsFromTasks };
    }

    // Otherwise, load from Storage API or generate initial data
    return await loadInitialData();
  }, [propsTasks, loadInitialData]);

  // React 상태 직접 관리 (useLocalStorage 대신 useState 사용)
  const [localTasks, setLocalTasksState] = useState<TodoTask[]>([]);
  const [sectionsRaw, setSectionsRaw] = useState<TodoSection[]>([]);
  const [isInitialized, setIsInitialized] = useState(false);

  // Initial data 비동기 로드
  useEffect(() => {
    const initializeData = async () => {
      const data = await getInitialData();
      setLocalTasksState(data.tasks);
      setSectionsRaw(data.sections);
      setIsInitialized(true);
    };

    initializeData();
  }, []); // 한 번만 실행

  // ============================================================================
  // Storage 동기화 헬퍼 함수
  // ============================================================================

  /**
   * 단일 태스크를 Storage에 동기화
   * @param task - 동기화할 태스크 (Widget 타입, DELETE 시에는 id만 있어도 됨)
   * @param operation - 수행할 작업 ('create' | 'update' | 'delete')
   * @param skipLog - 활동 로그 생성 건너뛰기 (내부 업데이트용)
   * @returns 성공 여부
   */
  const syncTaskToStorage = useCallback(async (
    task: TodoTask,
    operation: 'create' | 'update' | 'delete',
    skipLog = false
  ): Promise<boolean> => {
    try {
      if (operation === 'delete') {
        // DELETE는 ID만 필요 - 타입 변환 없이 직접 삭제
        await taskService.delete(task.id);
        return true;
      }

      // CREATE/UPDATE는 전체 Task 엔티티 필요
      const dashboardTask = widgetToDashboardTask(task);
      const taskEntity = toTask(dashboardTask);

      if (operation === 'create') {
        await taskService.create(taskEntity);
      } else {
        await taskService.update(task.id, taskEntity, skipLog);
      }
      return true;
    } catch (error) {
      console.error(`Failed to ${operation} task in Storage:`, error);
      return false;
    }
  }, []);

  /**
   * React State만 업데이트 (Storage 동기화 없음)
   * Storage 동기화는 각 핸들러에서 syncTaskToStorage를 직접 호출
   */
  const setLocalTasks = useCallback((tasks: TodoTask[] | ((prev: TodoTask[]) => TodoTask[])) => {
    setLocalTasksState((prevTasks) => {
      const newTasks = typeof tasks === 'function' ? tasks(prevTasks) : tasks;
      return newTasks;
    });
  }, []);

  // sections 업데이트 (Storage API는 각 핸들러에서 직접 호출)
  const setSections = useCallback((sections: TodoSection[] | ((prev: TodoSection[]) => TodoSection[])) => {
    setSectionsRaw((prevSections) => {
      const newSections = typeof sections === 'function' ? sections(prevSections) : sections;
      // Storage API는 handleAddSection, handleDeleteSection, handleUpdateSection에서 직접 호출
      return newSections;
    });
  }, []);

  // Ensure sections is always an array (defensive programming)
  const sections = Array.isArray(sectionsRaw) ? sectionsRaw : [];
  
  // viewMode도 useState로 변경
  const [viewMode, setViewModeState] = useState<ViewMode>(() => {
    if (typeof window !== 'undefined') {
      const saved = localStorage.getItem(VIEW_MODE_KEY);
      if (saved) {
        try {
          return JSON.parse(saved);
        } catch {}
      }
    }
    return 'section';
  });

  const setViewMode = useCallback((mode: ViewMode) => {
    setViewModeState(mode);
    if (typeof window !== 'undefined') {
      localStorage.setItem(VIEW_MODE_KEY, JSON.stringify(mode));
    }
  }, []);

  // Local UI state
  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({});
  const [selectedSectionId, setSelectedSectionId] = useState<string | null>(null);
  const [editingTaskId, setEditingTaskId] = useState<string | null>(null);
  const [editingTaskTitle, setEditingTaskTitle] = useState('');
  const [editingSectionId, setEditingSectionId] = useState<string | null>(null);
  const [editingSectionTitle, setEditingSectionTitle] = useState('');
  const [isAddingSection, setIsAddingSection] = useState(false);
  const [newSectionTitle, setNewSectionTitle] = useState('');

  // Drag and drop state
  const [draggedTask, setDraggedTask] = useState<TodoTask | null>(null);
  const [dragOverSection, setDragOverSection] = useState<string | null>(null);

  // Initialize expanded sections on mount
  useEffect(() => {
    const initialExpanded: Record<string, boolean> = {};
    sections.forEach(section => {
      initialExpanded[section.id] = section.isExpanded !== false;
    });
    setExpandedSections(initialExpanded);
  }, [sections]);

  // Task operations
  const handleToggleTask = useCallback((taskId: string) => {
    setLocalTasks(prev => prev.map(task => {
      if (task.id === taskId) {
        const updatedTask = { ...task, completed: !task.completed };

        // Defer callbacks to avoid state update issues
        setTimeout(() => {
          onTaskToggle?.(taskId);

          // 실시간 동기화: 다른 위젯들에게 변경사항 알림
          notifyCalendarDataChanged({
            source: 'todo',
            changeType: 'update',
            itemId: taskId,
            timestamp: Date.now(),
          });
        }, 0);

        return updatedTask;
      }
      // Check children
      if (task.children?.length) {
        return {
          ...task,
          children: task.children.map(child =>
            child.id === taskId
              ? { ...child, completed: !child.completed }
              : child
          )
        };
      }
      return task;
    }));
  }, [setLocalTasks, onTaskToggle]);

  const handleDeleteTask = useCallback(async (taskId: string) => {
    // Optimistic update: State 즉시 업데이트
    const prevTasks = localTasks;
    const taskToDelete = prevTasks.find(t => t.id === taskId) ||
                         prevTasks.flatMap(t => t.children || []).find(c => c.id === taskId);

    if (!taskToDelete) {
      console.error('Task not found:', taskId);
      return;
    }

    // 자식 태스크 ID 수집 (부모 삭제 시 자식도 함께 삭제)
    // 외래 키 제약 조건 때문에 자식을 먼저 삭제한 후 부모를 삭제해야 함
    const childrenToDelete = taskToDelete.children?.map(c => c.id) || [];
    const allTasksToDelete = [...childrenToDelete, taskId]; // 자식 먼저, 부모 나중

    // UI 즉시 업데이트
    setLocalTasks(prev =>
      prev
        .filter(task => !allTasksToDelete.includes(task.id))
        .map(task => ({
          ...task,
          children: task.children?.filter(child => !allTasksToDelete.includes(child.id))
        }))
    );

    // Storage 동기화 - 삭제할 모든 태스크 처리
    let deleteSuccess = true;
    for (const deleteId of allTasksToDelete) {
      const success = await syncTaskToStorage({ id: deleteId } as TodoTask, 'delete');
      if (!success) {
        deleteSuccess = false;
        break;
      }
    }

    if (!deleteSuccess) {
      // 실패 시 롤백
      setLocalTasks(prevTasks);
      console.error('Failed to delete tasks, rolled back');
      return;
    }

    // 다른 위젯에 알림
    setTimeout(() => {
      onTaskDelete?.(taskId);
      notifyCalendarDataChanged({
        source: 'todo',
        changeType: 'delete',
        itemId: taskId,
        timestamp: Date.now(),
      });
    }, 0);
  }, [localTasks, setLocalTasks, syncTaskToStorage, onTaskDelete]);

  const handleAddTask = useCallback(async (title: string, sectionId?: string, parentId?: string, priority?: TodoPriority, dueDate?: Date) => {
    // Ensure localTasks is an array
    const tasks = Array.isArray(localTasks) ? localTasks : [];

    // 섹션이 없으면 기본 섹션 자동 생성
    let targetSectionId = sectionId;
    if (sections.length === 0) {
      const defaultSection: TodoSection = {
        id: 'default',
        name: '📌 미구분',
        order: 0,
        isExpanded: true
      };
      setSections([defaultSection]);
      targetSectionId = 'default';
    } else if (!targetSectionId) {
      targetSectionId = sections[0]?.id || 'default';
    }

    const newTask: TodoTask = {
      id: uuidv4(),
      title,
      completed: false,
      priority: priority || DEFAULT_PRIORITY,
      depth: parentId ? 1 : 0,
      children: [],
      sectionId: targetSectionId,
      parentId,
      order: tasks.filter(t => t.sectionId === targetSectionId && !t.parentId).length,
      isExpanded: false,
      createdAt: new Date(),
      dueDate,
    };

    // Optimistic update: State 즉시 업데이트
    const prevTasks = localTasks;
    setLocalTasks(prev => {
      if (parentId) {
        return prev.map(task =>
          task.id === parentId
            ? { ...task, children: [...(task.children || []), newTask], isExpanded: true }
            : task
        );
      }
      return [...prev, newTask];
    });

    // Storage 동기화
    const success = await syncTaskToStorage(newTask, 'create');

    if (!success) {
      // 실패 시 롤백
      setLocalTasks(prevTasks);
      console.error('Failed to add task, rolled back');
      return;
    }

    // 자식 태스크인 경우: 부모의 subtasks 배열 업데이트
    // skipLog = true로 설정하여 활동 로그 생성 방지 (내부 업데이트)
    if (parentId) {
      const parent = prevTasks.find(t => t.id === parentId);
      if (parent) {
        const updatedParent = {
          ...parent,
          children: [...(parent.children || []), newTask]
        };
        await syncTaskToStorage(updatedParent, 'update', true); // skipLog = true
      }
    }

    // 다른 위젯에 알림
    setTimeout(() => {
      onTaskAdd?.(newTask);
      notifyCalendarDataChanged({
        source: 'todo',
        changeType: 'add',
        itemId: newTask.id,
        timestamp: Date.now(),
      });
    }, 0);
  }, [localTasks, sections, setSections, setLocalTasks, syncTaskToStorage, onTaskAdd]);

  const handleUpdateTask = useCallback(async (taskId: string, updates: Partial<TodoTask>) => {
    // Optimistic update: State 즉시 업데이트
    const prevTasks = localTasks;
    let updatedTask: TodoTask | undefined;

    setLocalTasks(prev =>
      prev.map(task => {
        if (task.id === taskId) {
          updatedTask = { ...task, ...updates };
          return updatedTask;
        }
        // Check children
        if (task.children?.length) {
          const hasChildUpdate = task.children.some(child => child.id === taskId);
          if (hasChildUpdate) {
            return {
              ...task,
              children: task.children.map(child => {
                if (child.id === taskId) {
                  updatedTask = { ...child, ...updates };
                  return updatedTask;
                }
                return child;
              })
            };
          }
        }
        return task;
      })
    );

    // Storage 동기화
    if (updatedTask) {
      const success = await syncTaskToStorage(updatedTask, 'update');

      if (!success) {
        // 실패 시 롤백
        setLocalTasks(prevTasks);
        console.error('Failed to update task, rolled back');
        return;
      }
    }

    // 다른 위젯에 알림
    setTimeout(() => {
      onTaskUpdate?.(taskId, updates);
      notifyCalendarDataChanged({
        source: 'todo',
        changeType: 'update',
        itemId: taskId,
        timestamp: Date.now(),
      });
    }, 0);
  }, [localTasks, setLocalTasks, syncTaskToStorage, onTaskUpdate]);

  // Section operations
  const handleToggleSection = useCallback((sectionId: string) => {
    setExpandedSections(prev => ({
      ...prev,
      [sectionId]: !prev[sectionId]
    }));
  }, []);

  const handleAddSection = useCallback(async (name: string) => {
    // 1. Widget TodoSection 생성
    const newWidgetSection: TodoSection = {
      id: uuidv4(),
      name,
      order: sections.length,
      isExpanded: true
    };

    // 2. React 상태 즉시 업데이트 (optimistic update)
    setSections(prev => [...prev, newWidgetSection]);

    // 3. Storage API에 비동기 저장
    try {
      // TODO: Auth 시스템 통합 후 실제 userId 사용
      // 현재는 Supabase RLS가 자동으로 user_id를 처리함
      const userId = 'current-user'; // Placeholder, RLS가 실제 userId로 대체
      const storagePayload = widgetToStorageSection(newWidgetSection, userId);

      // todoSectionService.create를 호출하여 Storage에 저장
      await todoSectionService.create(storagePayload);
    } catch (error) {
      console.error('Failed to add section to Storage API:', error);
      // 에러 발생 시 React 상태 롤백
      setSections(prev => prev.filter(s => s.id !== newWidgetSection.id));
    }
  }, [sections, setSections]);

  const handleDeleteSection = useCallback(async (sectionId: string) => {
    // 1. React 상태 즉시 업데이트 (optimistic update)
    setSections(prev => prev.filter(s => s.id !== sectionId));
    setLocalTasks(prev => prev.filter(t => t.sectionId !== sectionId));

    // 2. Storage API에서 비동기 삭제
    try {
      await todoSectionService.delete(sectionId);
    } catch (error) {
      console.error('Failed to delete section from Storage API:', error);
      // 에러 발생 시에는 이미 UI가 업데이트되었으므로,
      // 다음 로드 시 Storage와 동기화될 것임
    }
  }, [setSections, setLocalTasks]);

  const handleUpdateSection = useCallback(async (sectionId: string, name: string) => {
    // 1. React 상태 즉시 업데이트 (optimistic update)
    setSections(prev => prev.map(section =>
      section.id === sectionId ? { ...section, name } : section
    ));

    // 2. Storage API에 비동기 업데이트
    try {
      await todoSectionService.update(sectionId, { name });
    } catch (error) {
      console.error('Failed to update section in Storage API:', error);
      // 에러 발생 시에는 이미 UI가 업데이트되었으므로,
      // 다음 로드 시 Storage와 동기화될 것임
    }
  }, [setSections]);

  // Drag and drop handlers
  const handleDragStart = useCallback((e: React.DragEvent, task: TodoTask) => {
    setDraggedTask(task);
    e.dataTransfer.effectAllowed = 'move';

    // 캘린더 위젯과의 상호작용을 위해 task 데이터를 dataTransfer에 저장
    // HTML5 drag and drop API를 사용하여 위젯 간 드래그 지원
    const taskData = {
      type: 'todo-task',
      task: {
        id: task.id,
        title: task.title,
        dueDate: task.dueDate,
        priority: task.priority,
        completed: task.completed
      }
    };
    e.dataTransfer.setData('application/json', JSON.stringify(taskData));
    e.dataTransfer.setData('text/plain', task.title); // 폴백용
  }, []);

  const handleDragEnd = useCallback(() => {
    setDraggedTask(null);
    setDragOverSection(null);
  }, []);

  const handleDragOver = useCallback((e: React.DragEvent, sectionId: string) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
    setDragOverSection(sectionId);
  }, []);

  const handleDrop = useCallback((e: React.DragEvent, targetSectionId: string) => {
    e.preventDefault();
    
    if (!draggedTask) {
      setDraggedTask(null);
      setDragOverSection(null);
      return;
    }
    
    // 섹션이 없으면 기본 섹션 자동 생성
    if (sections.length === 0) {
      const defaultSection: TodoSection = {
        id: 'default',
        name: '📌 미구분',
        order: 0,
        isExpanded: true
      };
      setSections([defaultSection]);
    }

    // 날짜 뷰에서 드롭한 경우 'date-' 접두사 제거
    let actualSectionId = targetSectionId;
    if (targetSectionId.startsWith('date-')) {
      // 날짜 뷰에서는 첫 번째 섹션으로 이동하거나 'default' 섹션으로 이동
      actualSectionId = sections.length > 0 ? sections[0].id : 'default';
    }
    
    // 드래그한 작업을 새로운 섹션으로 이동
    if (draggedTask.sectionId !== actualSectionId) {
      setLocalTasks(prev => {
        // 먼저 하위 작업들도 함께 이동
        const moveTaskWithChildren = (tasks: TodoTask[]): TodoTask[] => {
          return tasks.map(task => {
            if (task.id === draggedTask.id) {
              return { ...task, sectionId: actualSectionId };
            }
            // 부모가 이동하는 경우 자식들도 함께 이동
            if (task.parentId === draggedTask.id) {
              return { ...task, sectionId: actualSectionId };
            }
            // 자식 작업들 확인
            if (task.children && task.children.length > 0) {
              return {
                ...task,
                children: task.children.map(child => {
                  if (child.id === draggedTask.id || child.parentId === draggedTask.id) {
                    return { ...child, sectionId: actualSectionId };
                  }
                  return child;
                })
              };
            }
            return task;
          });
        };
        
        return moveTaskWithChildren(prev);
      });
    }
    
    setDraggedTask(null);
    setDragOverSection(null);
  }, [draggedTask, sections, setSections, setLocalTasks]);

  // 실시간 동기화: 다른 위젯(캘린더)에서의 변경사항 감지

  useEffect(() => {
    const handleStorageChange = async () => {
      // Storage API에서 최신 데이터 다시 로드
      try {
        const updatedTasks = await getTodoTasks();

        if (Array.isArray(updatedTasks)) {
          // React 상태 직접 업데이트 (Storage API 저장 없이)
          setLocalTasksState([...updatedTasks]);
        }
      } catch (error) {
        console.error('Failed to sync todo data from Storage API:', error);
      }
    };

    const unsubscribe = addCalendarDataChangedListener((event) => {
      const { source, changeType } = event.detail;

      // 투두 소스의 이벤트만 처리 (캘린더에서 발생한 이벤트)
      if (source === 'todo') {
        if ((changeType as any) === 'update' || (changeType as any) === 'todo-date-update') {
          // localStorage 변경을 감지하여 상태 업데이트
          handleStorageChange();
        }
      }
    });

    // storage 이벤트 리스너 추가 (다른 탭/윈도우에서의 변경사항 감지)
    window.addEventListener('storage', handleStorageChange);

    // 컴포넌트 언마운트 시 리스너 해제
    return () => {
      unsubscribe();
      window.removeEventListener('storage', handleStorageChange);
    };
  }, [setLocalTasks]);

  // Date groups for date view
  const dateGroups = useMemo(() => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);

    const thisWeek = new Date(today);
    thisWeek.setDate(thisWeek.getDate() + 7);

    // Ensure localTasks is an array
    const tasks = Array.isArray(localTasks) ? localTasks : [];

    return {
      today: tasks.filter(t => {
        if (!t.dueDate) return false;
        const due = new Date(t.dueDate);
        due.setHours(0, 0, 0, 0);
        return due.getTime() === today.getTime();
      }),
      tomorrow: tasks.filter(t => {
        if (!t.dueDate) return false;
        const due = new Date(t.dueDate);
        due.setHours(0, 0, 0, 0);
        return due.getTime() === tomorrow.getTime();
      }),
      thisWeek: tasks.filter(t => {
        if (!t.dueDate) return false;
        const due = new Date(t.dueDate);
        due.setHours(0, 0, 0, 0);
        return due > tomorrow && due <= thisWeek;
      }),
      overdue: tasks.filter(t => {
        if (!t.dueDate) return false;
        const due = new Date(t.dueDate);
        due.setHours(0, 0, 0, 0);
        return due < today;
      })
    };
  }, [localTasks]);

  return {
    // State
    localTasks,
    sections,
    viewMode,
    expandedSections,
    selectedSectionId,
    editingTaskId,
    editingTaskTitle,
    editingSectionId,
    editingSectionTitle,
    draggedTask,
    dragOverSection,
    isAddingSection,
    newSectionTitle,
    dateGroups,
    
    // Task handlers
    handleToggleTask,
    handleDeleteTask,
    handleAddTask,
    handleUpdateTask,
    
    // Section handlers
    handleToggleSection,
    handleAddSection,
    handleDeleteSection,
    handleUpdateSection,
    
    // Drag handlers
    handleDragStart,
    handleDragEnd,
    handleDragOver,
    handleDrop,
    
    // State setters
    setEditingTaskId,
    setEditingTaskTitle,
    setEditingSectionId,
    setEditingSectionTitle,
    setIsAddingSection,
    setNewSectionTitle,
    setViewMode
  };
}